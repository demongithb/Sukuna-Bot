// Funci√≥n universal para verificar permisos de admin y bot
async function verificarPermisos(m, conn) {
    let isUserAdmin = false
    let isBotAdmin = false
    let isOwner = false
    
    // Verificar si es owner
    if (global.owner) {
        isOwner = global.owner.some(owner => {
            let ownerNumber = Array.isArray(owner) ? owner[0] : owner
            return ownerNumber === m.sender.split('@')[0]
        })
    }
    
    // Verificar permisos en grupos
    if (m.chat.includes('@g.us') || m.chat.includes('@lid')) {
        try {
            let groupMetadata = await conn.groupMetadata(m.chat)
            if (groupMetadata && groupMetadata.participants) {
                let participants = groupMetadata.participants
                
                // Verificar si el usuario es admin (o si es owner)
                if (!isOwner) {
                    let userParticipant = participants.find(p => p.id === m.sender)
                    if (userParticipant) {
                        isUserAdmin = userParticipant.admin === 'admin' || userParticipant.admin === 'superadmin'
                    }
                } else {
                    isUserAdmin = true // Owner siempre puede usar comandos de admin
                }
                
                // Verificar si el bot es admin con m√∫ltiples m√©todos
                let botJid = conn.user?.jid || conn.user?.id || conn.decodeJid?.(conn.user?.id)
                
                if (botJid) {
                    // Buscar bot en participantes con m√∫ltiples m√©todos
                    let botParticipant = participants.find(p => {
                        return p.id === botJid || 
                               p.id.split('@')[0] === botJid.split('@')[0] ||
                               p.id.includes(botJid.split('@')[0]) ||
                               botJid.includes(p.id.split('@')[0])
                    })
                    
                    if (botParticipant) {
                        isBotAdmin = botParticipant.admin === 'admin' || botParticipant.admin === 'superadmin'
                    } else {
                        // B√∫squeda por n√∫mero si no se encuentra
                        let botNumber = botJid.split('@')[0].replace(/\D/g, '')
                        botParticipant = participants.find(p => {
                            let participantNumber = p.id.split('@')[0].replace(/\D/g, '')
                            return participantNumber === botNumber
                        })
                        
                        if (botParticipant) {
                            isBotAdmin = botParticipant.admin === 'admin' || botParticipant.admin === 'superadmin'
                        }
                    }
                }
            }
        } catch (error) {
            console.error('Error verificando permisos:', error)
        }
    }
    
    return {
        isUserAdmin: isUserAdmin || isOwner,
        isBotAdmin,
        isOwner
    }
}

let handler = async (m, { conn, args, text, usedPrefix, command }) => {
    const emoji = 'üìß'
    const emoji2 = '‚ö†Ô∏è'
    
    // Verificar si es grupo (compatible con @g.us y @lid)
    if (!m.chat.includes('@g.us') && !m.chat.includes('@lid')) {
        return conn.reply(m.chat, `${emoji2} Este comando solo funciona en grupos.`, m)
    }
    
    // Verificar permisos usando la funci√≥n universal
    const permisos = await verificarPermisos(m, conn)
    
    // Debug info
    console.log('=== DEBUG INVITE ===')
    console.log('Chat:', m.chat)
    console.log('User admin:', permisos.isUserAdmin)
    console.log('Bot admin:', permisos.isBotAdmin)
    console.log('Is owner:', permisos.isOwner)
    
    // Verificar si el usuario puede usar el comando
    if (!permisos.isUserAdmin) {
        return conn.reply(m.chat, `${emoji2} Solo los administradores del grupo pueden usar este comando.`, m)
    }
    
    // Verificar si el bot es admin
    if (!permisos.isBotAdmin) {
        return conn.reply(m.chat, `${emoji2} El bot necesita ser administrador para generar enlaces de invitaci√≥n.`, m)
    }
    
    // Validar n√∫mero
    if (!text) {
        return conn.reply(m.chat, `${emoji} Por favor, ingrese el n√∫mero al que quiere enviar una invitaci√≥n al grupo.\n\n*Ejemplo:* ${usedPrefix}${command} 521234567890`, m)
    }
    
    if (text.includes('+')) {
        return conn.reply(m.chat, `${emoji2} Ingrese el n√∫mero todo junto sin el *+*`, m)
    }
    
    if (isNaN(text)) {
        return conn.reply(m.chat, `${emoji2} Ingrese s√≥lo n√∫meros sin su c√≥digo de pa√≠s y sin espacios.`, m)
    }
    
    try {
        // Generar link de invitaci√≥n
        let group = m.chat
        let inviteCode = await conn.groupInviteCode(group)
        let link = 'https://chat.whatsapp.com/' + inviteCode
        
        // Obtener info del grupo
        let groupMetadata = await conn.groupMetadata(group)
        let groupName = groupMetadata.subject || 'este grupo'
        
        // Mensaje de invitaci√≥n personalizado
        let inviteMessage = `${emoji} *INVITACI√ìN A GRUPO*\n\n` +
                           `üëã ¬°Hola! Un usuario te invit√≥ a unirte al grupo *${groupName}*\n\n` +
                           `üîó *Enlace de invitaci√≥n:*\n${link}\n\n` +
                           `üí¨ ¬°Esperamos verte pronto en el grupo!`
        
        // Enviar invitaci√≥n
        await conn.reply(text + '@s.whatsapp.net', inviteMessage, m, {
            mentions: [m.sender]
        })
        
        // Confirmar env√≠o
        await conn.reply(m.chat, `${emoji} ‚úÖ Se envi√≥ un enlace de invitaci√≥n al n√∫mero *${text}*\n\nüì± El usuario recibir√° la invitaci√≥n en su chat privado.`, m)
        
    } catch (error) {
        console.error('Error enviando invitaci√≥n:', error)
        
        if (error.message?.includes('not-admin')) {
            return conn.reply(m.chat, `${emoji2} Error: El bot no tiene permisos de administrador para generar enlaces.`, m)
        } else if (error.message?.includes('forbidden')) {
            return conn.reply(m.chat, `${emoji2} Error: No se pudo enviar la invitaci√≥n al n√∫mero ${text}. Verifica que el n√∫mero sea correcto.`, m)
        } else {
            return conn.reply(m.chat, `${emoji2} Error al enviar la invitaci√≥n: ${error.message}`, m)
        }
    }
}

handler.help = ['invite *<n√∫mero>*', 'add *<n√∫mero>*']
handler.tags = ['group']
handler.command = ['add', 'agregar', 'a√±adir', 'invite', 'invitar']
handler.group = true

export default handler
